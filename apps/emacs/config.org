#+TITLE: sauloxd/doom
#+STARTUP: content 

* User
#+begin_src elisp :noeval
(setq user-full-name "Saulo Toshiichi Furuta"
      user-email-address "hi@saulo.dev")
#+end_src

* Bindings
** Creates a custom keymap
#+begin_src elisp
(defvar sxd/kustom-keymap (make-sparse-keymap))
(map! :leader :desc "Kustom" "k" sxd/kustom-keymap)

(map! :map sxd/kustom-keymap
      ;; Conflicts with org mode +fold/toggle, fixes when trying to toggle inside a code-block of code
      "a" '+fold/toggle)
#+end_src
** Group custom bindings
#+begin_src elisp
(map! :map sxd/kustom-keymap
      ;; Conflicts with org mode +fold/toggle, fixes when trying to toggle inside a code-block of code
      "a" '+fold/toggle)
#+end_src
* General
** Default buffer behaviour
*** Use prog-mode instead of fundamental mode to get linumbers and multicursors working
#+BEGIN_SRC elisp :noeval
(setq-default major-mode 'prog-mode)
(setq-default initial-major-mode 'prog-mode)
(setq doom-scratch-initial-major-mode 'prog-mode)
#+END_SRC
* Editor
** Spacing
#+begin_src elisp :noeval
(setq custom-tab-width 2)
#+end_src
* Appearance
** Themes
#+BEGIN_SRC elisp
(setq doom-theme 'doom-vibrant)
#+END_SRC
* Org
** Values
#+begin_src elisp
;; Allow typescript to be used in code block
(setq org-directory "~/org"
      org-agenda-files (list "~/org/roam" "~/org/journal" "~/org/mobile")
      org-roam-directory "~/org/roam"
      org-src-tab-acts-natively t
      org-tag-alist '(("read" . ?r) ("urgent" . ?u) ("not_urgent" . ?U) ( "important" . ?i) ("not_important" . ?I)))
(org-babel-do-load-languages 'org-babel-load-languages '((typescript . t)))
#+end_src

** Org refile
Save after a refile just in case
#+begin_src elisp :noeval
(advice-add 'org-refile :after 'org-save-all-org-buffers)
(setq org-refile-targets '((nil :maxlevel . 3) ; nil is the current buffer
                           (org-agenda-files :maxlevel . 3)))
#+end_src

** Org capture custom templates
#+begin_src elisp
(after! org-capture
  (let
      (
       ;; Important TODOs do as fast as possible
       (todo-entries '(
                       ("t" "TODO" entry (file+headline "./roam/inbox.org" "PLEASE CLASSIFY EVERY TASK HERE") "* TODO %u %?" :prepend t :empty-lines 1 :kill-buffer t)
                     ))

       (journal-entries '(
                          ("j" "Journal" entry (file+headline "./roam/inbox.org" "Notes")
                           "* %? \n%a" :empty-lines 1)
                          ))
       (experimenting '(
                        ;; Maybe adding some capture to build stack knowledge
                        ;; https://200ok.ch/posts/org-mode-capture-template-for-code-snippets.html
                        ("s" "clock entry" entry (clock) "* %?\n%(ha/org-capture-code-snippet \"%F\")" :empty-lines 1)
                        ("e" "clock plain" plain (clock) "%?\n%(ha/org-capture-code-snippet \"%F\")" :empty-lines 1)
                        ("x" "cl: snipx" plain (file+headline "./roam/inbox.org" "Eng") "%?\n%(ha/org-capture-code-snippet \"%F\")" :empty-lines 1)
                      ))

       ;; Just for reference
       (local-project-notes '(
                              ("p" "Templates for projects")
                                ;; Will use {project-root}/{todo,notes,changelog}.org, unless a
                                ;; {todo,notes,changelog}.org file is found in a parent directory.

                              ("pt" "Project todo" entry    ; {project-root}/todo.org
                               (file+headline +org-capture-project-todo-file "Inbox") "* TODO %?\n%i" :prepend t :kill-buffer t)
                              ("pn" "Project notes" entry   ; {project-root}/notes.org
                               (file+headline +org-capture-project-notes-file "Inbox") "* TODO %?\n%i" :prepend t :kill-buffer t)
                              ("pc" "Project changelog" entry ; {project-root}/changelog.org
                               (file+headline +org-capture-project-notes-file "Unreleased")
                               "* TODO %?\n%i" :prepend t :kill-buffer t)

                              ))
       )

    (setq org-capture-templates (append todo-entries experimenting journal-entries))))
;; Captures code with source
(defun ha/org-capture-code-snippet (f)
  "Given a file, F, this captures the currently selected text
within an Org SRC block with a language based on the current mode
and a backlink to the function and the file."
  (with-current-buffer (find-buffer-visiting f)
    (let ((org-src-mode (replace-regexp-in-string "-mode" "" (format "%s" major-mode)))
          (func-name (which-function)))
      (ha/org-capture-fileref-snippet f "SRC" org-src-mode func-name))))
(defun ha/org-capture-clip-snippet (f)
  "Given a file, F, this captures the currently selected text
within an Org EXAMPLE block and a backlink to the file."
  (with-current-buffer (find-buffer-visiting f)
    (ha/org-capture-fileref-snippet f "EXAMPLE" "" nil)))

(defun ha/org-capture-fileref-snippet (f type headers func-name)
  (let* ((code-snippet
          (buffer-substring-no-properties (mark) (- (point) 1)))
         (file-name   (buffer-file-name))
         (file-base   (file-name-nondirectory file-name))
         (line-number (line-number-at-pos (region-beginning)))
         (initial-txt (if (null func-name)
                          (format "From [[file:%s::%s][%s]]:"
                                  file-name line-number file-base)
                        (format "From ~%s~ (in [[file:%s::%s][%s]]):"
                                func-name file-name line-number
                                file-base))))
    (format "
%s
#+BEGIN_%s %s
%s
#+END_%s" initial-txt type headers code-snippet type)))
#+end_src

** Org Agenda
#+begin_src elisp
(defun toa/print-org-outline-path (l)
  (org-format-outline-path (org-get-outline-path) l nil " > "))

(setq org-agenda-custom-commands
  '(
     ("r" "Reading"
       (
         (tags-todo "read" (
                             (org-agenda-overriding-header "\nPending reading")
                             (org-agenda-remove-tags t)
                             (org-agenda-todo-keyword-format "")
                             (org-agenda-prefix-format
                               " %i %?-25(toa/print-org-outline-path 25) % s % e")))
         ))
     ("z" "Eisenheuer Matrix"
       (
         (tags-todo "-important-urgent-not_urgent-not_important-read-idea" (
                                                                        (org-agenda-overriding-header "\n‚ö†Ô∏è Uncategorized\n")
                                                                        (org-agenda-remove-tags t)
                                                                        (org-agenda-todo-keyword-format "")
                                                                        (org-agenda-prefix-format
                                                                          " %i %?-25(toa/print-org-outline-path 25) % s % e")))
         (tags-todo "urgent+important" (
                                         (org-agenda-overriding-header "\nüî• Urgent + ‚≠ê Ô∏èImportant")
                                         (org-agenda-remove-tags t)
                                         (org-agenda-todo-keyword-format "")
                                         (org-agenda-prefix-format
                                           " %i %?-25(toa/print-org-outline-path 25) % s % e")))
         (tags-todo "urgent+not_important" (
                                             (org-agenda-overriding-header "\nüî• Urgent + NOT Ô∏èimportant")
                                             (org-agenda-remove-tags t)
                                             (org-agenda-todo-keyword-format "")
                                             (org-agenda-prefix-format
                                               " %i %?-25(toa/print-org-outline-path 25) % s % e")))
         (tags-todo "not_urgent+important" (
                                             (org-agenda-overriding-header "\nNOT Urgent + ‚≠ê Ô∏èimportant")
                                             (org-agenda-remove-tags t)
                                             (org-agenda-todo-keyword-format "")
                                             (org-agenda-prefix-format
                                               " %i %?-25(toa/print-org-outline-path 25) % s % e")))

         (tags-todo "not_urgent+not_important" (
                                                 (org-agenda-overriding-header "\nNOT Urgent + NOT Ô∏èimportant")
                                                 (org-agenda-remove-tags t)
                                                 (org-agenda-todo-keyword-format "")
                                                 (org-agenda-prefix-format
                                                   " %i %?-25(toa/print-org-outline-path 25) % s % e")))

         ))))

(defun sxd/eisenhower-matrix-agenda-view (&optional arg) (interactive) (org-agenda arg "z"))

(defun sxd/reading-agenda-view (&optional arg) (interactive) (org-agenda arg "r"))

(map! :map sxd/kustom-keymap
      "z" 'sxd/eisenhower-matrix-agenda-view
      "r" 'sxd/reading-agenda-view)
#+end_src
** Org images
[[file:../org/roam/20201110222725-images.org][Images]]
#+begin_src elisp
(defun sxd/clipboard-image (file-name)
  "Paste image asking for file name, defaults with timestamp name."
  (interactive (list (read-string
                      (format "Img name (default: %s) " (format-time-string "%Y-%m-%d_%H-%M-%S.png"))
                      nil
                      nil
                      (format-time-string "%Y-%m-%d_%H-%M-%S.png"))))

  (let ((absolute-file-name (concat org-directory "/images/" file-name)))
    (shell-command (concat "pngpaste " absolute-file-name))
    (insert "#+ATTR_ORG: :width 400\n")
    (insert (concat "[[" absolute-file-name "]]"))
    (org-display-inline-images)))

(defun sxd/remove-image ()
  "Remove file associated with link, if file exists."
  (interactive)
  (if (org-in-regexp org-link-bracket-re 1)
      (let ((image-path (match-string 1)))
        (if (file-exists-p image-path)
            (delete-file image-path))
        (kill-whole-line)
        )))

(map! :when (featurep! :lang org)
      (:map sxd/kustom-keymap
       "p" 'sxd/clipboard-image
       "k" 'sxd/remove-image))
#+end_src
* Packages
** Evil
*** Values
#+begin_src elisp :noeval
;; When deleting a TAB, delete it all instead of transforming to space, and deleting one
(setq backward-delete-char-untabify-method 'hungry)
(setq-default
  evil-shift-width custom-tab-width
  evil-shift-round custom-tab-width
  tab-width custom-tab-width
  standard-indent custom-tab-width
  indent-tabs-mode nil
  ;; Go to window on split
  evil-split-window-below t evil-vsplit-window-right t)
#+end_src
*** Bindings
#+begin_src elisp :noeval
(after! evil
  (map! :n "j" #'evil-next-visual-line
        :n "k" #'evil-previous-visual-line
        :n "g~" 'evil-operator-string-inflection ))
#+end_src
*** Hacks
#+begin_src elisp :noeval
;; _ as part of word_, for ruby_users
(add-hook 'after-change-major-mode-hook
          (lambda ()
            (modify-syntax-entry ?_ "w")))
#+end_src

** neotree
#+begin_src elisp :noeval
(defun sxd/split-v-and-window-resize(&rest args)
  (apply 'neo-open-file-vertical-split args)
  (balance-windows))

(after! neotree
  (map! :map neotree-mode-map
        :m "h"   #'+neotree/collapse-or-up
        :m "l"   #'+neotree/expand-or-open
        :n "J"   #'neotree-select-next-sibling-node
        :n "K"   #'neotree-select-previous-sibling-node
        :n "H"   #'neotree-select-up-node
        :n "L"   #'neotree-select-down-node
        :n "v"   (neotree-make-executor :file-fn 'sxd/split-v-and-window-resize)))
#+end_src

* OS
** MacOS
#+begin_src elisp :noeval
;; enables right option to create accents
(setq mac-right-option-modifier 'none)
#+end_src

** WSL
#+begin_src elisp
(defun sxd/wsl-copy (start end)
  (interactive "r")
  (shell-command-on-region start end "clip.exe")
  (deactivate-mark))

(map! :map sxd/kustom-keymap
      ;; Conflicts with org mode +fold/toggle, fixes when trying to toggle inside a code-block of code
      "y" 'sxd/wsl-copy)
#+end_src

* References of other cool configs
** https://github.com/ztlevi/doom-config
** https://justin.abrah.ms/dotfiles/emacs.html
** https://github.com/psamim/dotfiles/blob/master/doom/config.el#L73
** https://github.com/ztlevi/doom-config/blob/2ec57adcede94314b10a3244aaf7ae6ba6872cd9/%2Btext.el
