#+TITLE: sauloxd/doom
#+STARTUP: content 

* References of other cool configs
https://github.com/ztlevi/doom-config
https://justin.abrah.ms/dotfiles/emacs.htm

* User
#+begin_src emacs-lisp
(setq user-full-name "Saulo Toshiichi Furuta")
(setq user-email-address "hi@saulo.dev")
#+end_src

#+RESULTS:
: hi@saulo.dev

* Bindings
Loads a custom keymap for custom functions/bindings 
#+begin_src elisp
(defun sxd/toggle-message-popup()
  (interactive)
  (cond ((+popup-windows) (+popup/close-all t))
        ((display-buffer (get-buffer "*Messages*")))))

(defvar sxd/kustom-keymap (make-sparse-keymap))

(map! :map sxd/kustom-keymap
      "a" '+fold/toggle
      "m" 'sxd/toggle-message-popup)
#+end_src

#+RESULTS:

* General
** Default buffer behaviour
*** Use prog-mode instead of fundamental mode to get linumbers and multicursors working
#+BEGIN_SRC emacs-lisp
(setq-default major-mode 'prog-mode)
(setq-default initial-major-mode 'prog-mode)
(setq doom-scratch-initial-major-mode 'prog-mode)
#+END_SRC

#+RESULTS:
: prog-mode

** Delete selection when pasting
#+begin_src emacs-lisp
(delete-selection-mode 1)
#+end_src

#+RESULTS:
: t
** Go to window when split is created
#+begin_src emacs-lisp
(setq evil-split-window-below t
      evil-vsplit-window-right t)

#+end_src

#+RESULTS:
: t

* Appearance
** Themes
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-one)
#+END_SRC

#+RESULTS:
: doom-one

** Font
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Iosevka SS03" :size 14))
(setq doom-variable-pitch-font (font-spec :family "Iosevka SS03"))
#+END_SRC

#+RESULTS:
: #<font-spec nil nil Iosevka\ SS03 nil nil nil nil nil nil nil nil nil nil>

* Org
** Org files and directories
#+name: org_variables
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org")
(setq org-roam-directory "~/org/roam")
(setq org-src-tab-acts-natively t)
#+END_SRC

#+RESULTS: org_variables
: t
    
** Org agenda
** Org tags
#+begin_src elisp
(setq org-tag-alist
      '((:startgroup)
                                        ; Put mutually exclusive tags here
        (:endgroup)
        ("@errand" . ?E)
        ("@home" . ?H)
        ("@work" . ?W)
        ("agenda" . ?a)
        ("planning" . ?p)
        ("publish" . ?P)
        ("batch" . ?b)
        ("note" . ?n)
        ("idea" . ?i)
        ("thinking" . ?t)
        ("recurring" . ?r)))
#+end_src

#+RESULTS:
: ((:startgroup) (:endgroup) (@errand . 69) (@home . 72) (@work . 87) (agenda . 97) (planning . 112) (publish . 80) (batch . 98) (note . 110) (idea . 105) (thinking . 116) (recurring . 114))

** Org refile
Save after a refile just in case
#+begin_src elisp
(advice-add 'org-refile :after 'org-save-all-org-buffers)
(setq org-refile-targets '((nil :maxlevel . 3) ; nil is the current buffer
                           (org-agenda-files :maxlevel . 3)))
#+end_src

#+RESULTS:
: ((nil :maxlevel . 3) (org-agenda-files :maxlevel . 3))

** Org capture custom templates
#+begin_src elisp
(after! org-capture
  (let
      (
       (todo-entries '(
                       ("b" "black hole" entry (file "./inbox.org") "* %?" :empty-lines 1)))

       (journal-entries '(
                          ("j" "Journal" entry (file+datetree "./journal/2020.org")
                           "**** [ ] %U - %? \n%a" :tree-type week :empty-lines 1)
                          ))
       )

    (setq org-capture-templates (append todo-entries journal-entries))))
#+end_src

#+RESULTS:
| l  | Learning |       |                                        |           |
| lr | Ruby     | entry | (file+headline ./learn/ruby.org Inbox) | * Ruby %U |

** Org images
[[file:../org/roam/20201110222725-images.org][Images]]
#+begin_src elisp
(defun sxd/clipboard-image (file-name)
  (interactive (list (read-string
                      (format "Img name (default: %s) " (format-time-string "%Y-%m-%d_%H-%M-%S.png"))
                      nil
                      nil
                      (format-time-string "%Y-%m-%d_%H-%M-%S.png"))
                     ))
  (let ((absolute-file-name (concat org-directory "/images/" file-name)))
    (shell-command (concat "pngpaste " absolute-file-name))
    (insert "#+ATTR_ORG: :width 400\n")
    (insert (concat "[[" absolute-file-name "]]"))
    (org-display-inline-images)))

(defun sxd/remove-image ()
  "Remove file associated with link, if file exists"
  (interactive)
  (if (org-in-regexp org-link-bracket-re 1)
      (let ((image-path (match-string 1)))
        (if (file-exists-p image-path)
            (delete-file image-path))
        (kill-whole-line)
        )))

(map! :when (featurep! :lang org)
      (:map sxd/kustom-keymap
       "p" 'sxd/clipboard-image
       "k" 'sxd/remove-image))

(map! :leader
      :desc "Kustom" "k" sxd/kustom-keymap)
#+end_src

#+RESULTS:
: (keymap (112 . sxd/clipboard-image) (109 . sxd/toggle-message-popup) (97 . +fold/toggle))

* Packages

** Deft
Quickly navigate in notes
#+BEGIN_SRC emacs-lisp
(setq deft-directory "~/org"
      deft-recursive t
      deft-use-filter-string-for-filename t)
#+END_SRC

** Evil
#+BEGIN_SRC emacs-lisp
;; backspace deletes tabs
(setq backward-delete-char-untabify-method 'hungry)
(setq custom-tab-width 2)
;; >>
;; moves to set tab width value
(setq-default evil-shift-width custom-tab-width)
(setq-default evil-shift-round custom-tab-width)
(setq-default tab-width 2 standard-indent 2)

(after! evil
  (map! :n "j" #'evil-next-visual-line
        :n "k" #'evil-previous-visual-line
        ))

;; _ as part of word_
(add-hook 'after-change-major-mode-hook
          (lambda ()
            (modify-syntax-entry ?_ "w")))
#+END_SRC

*** Multiple cursors/editing
There are 2 packages:
- Simple multiedit. Select word -> R -> C(hange)/D(elete)/A(start insert mode end region)/I...etc -> write
- Advanced mutliple cursor
  C-v -> gzz -> has editing power with vim motions
  Select word -> gzm

** Company
#+BEGIN_SRC emacs-lisp
(setq company-idle-delay 0.3
      company-minimum-prefix-length 3
      company-tooltip-limit 10)

(after! robe
  (set-company-backend! 'ruby-mode '(company-dabbrev company-robe)))

(after! org
  (set-company-backend! 'org-mode '(company-org-roam company-capf company-dabbrev company-yasnippet company-ispell)))
#+END_SRC

** lang
#+begin_src emacs-lisp
  ;; (setq-hook! 'ruby-mode-hook +format-with-lsp nil)

#+end_src

** Flycheck
*** only check syntax on save
#+BEGIN_SRC emacs-lisp
(after! flycheck
  (setq flycheck-check-syntax-automatically '(mode-enabled save))
  (setq-default flycheck-disabled-checkers '(ruby-reek))
  (setq flycheck-disabled-checkers '(ruby-reek)))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(after! magit
  (setq git-commit-summary-max-length 300))
#+END_SRC

#+RESULTS:
: 300

** Which-key
#+begin_src emacs-lisp
(setq which-key-idle-delay 0.5)
#+end_src

#+RESULTS:
: 0.5

** neotree
#+begin_src elisp
(defun sxd/split-v-and-window-resize(&rest args)
  (apply 'neo-open-file-vertical-split args)
  (balance-windows))

(after! neotree
  (map! :map neotree-mode-map
        :m "h"   #'+neotree/collapse-or-up
        :m "l"   #'+neotree/expand-or-open
        :n "J"   #'neotree-select-next-sibling-node
        :n "K"   #'neotree-select-previous-sibling-node
        :n "H"   #'neotree-select-up-node
        :n "L"   #'neotree-select-down-node
        :n "v"   (neotree-make-executor :file-fn 'sxd/split-v-and-window-resize)))
#+end_src

#+RESULTS:

* TEMP FIXES
*** MacOS flickering
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(inhibit-double-buffering . t))
#+END_SRC

#+RESULTS:
: ((inhibit-double-buffering . t) (right-divider-width . 1) (bottom-divider-width . 1) (vertical-scroll-bars) (tool-bar-lines . 0) (menu-bar-lines . 0) (left-fringe . 4) (right-fringe . 4))
